# Brain transcriptome paper
#only the FDr <0.05 analysis. 
# Complete Batch 2 analysis 
library(edgeR)
library(limma)
library(gplots)
library(org.Hs.eg.db)
library(RColorBrewer)
library(clusterProfiler)
library(ggplot2)
library(ggrepel)
library(ReactomePA)
library(dendextend)
library(tidyverse)
library(tm)
library(plotly)
library(ggpubr)
library(ggfortify)
library(eulerr)
library(patchwork)
library(magrittr)
library("grid")
library("gridExtra")
library("pheatmap")
library(readxl)
library(factoextra)



# ASD importing  --------------------------
#importing 
ASDsamples <- read_csv("annotations/ASDsamples.csv",col_types = cols(...1 = col_skip()))
ASDsamples <- as.data.frame(ASDsamples)
#counts
ASDcounts <- read_csv("annotations/ASDcounts.csv")
ASDcounts <- as.data.frame(ASDcounts)
rownames(ASDcounts) <- ASDcounts$...1
ASDcounts <- ASDcounts[,-1]
ASDcounts <- as.matrix(ASDcounts)
#annot
ASDannotation <- read_csv("annotations/ASDannotation.csv")
ASDannotation <- as.data.frame(ASDannotation)
rownames(ASDannotation) <- ASDannotation$...1
ASDannotation <- ASDannotation[,-1]

#Create a DGE list
ASDDGE <- DGEList(counts = ASDcounts, samples = ASDsamples, genes = ASDannotation)
#Normalise
ASDDGE <- calcNormFactors(ASDDGE, method = "TMM")
#Filter
keep <- filterByExpr(ASDDGE,group = ASDsamples$Diagnosis)
ASDDGE <- ASDDGE[keep,]
#Create a counts per million object
ASDcpm <- cpm(ASDDGE)
#Create a LOG counts per million object
ASDlcpm <- cpm(ASDDGE, log=TRUE)

# ASD DGE 0.05 ------------------------------------------------------------

cond=paste0(ASDsamples$Diagnosis)
design=model.matrix(~0 + cond, data = ASDsamples)
y<-estimateDisp(ASDDGE,design)
fit <- glmQLFit(y, design)

#contrast matrix
ASD<-makeContrasts(condASD-condControl, levels=design)

#comparing everything 
qlf<-glmQLFTest(fit, contrast = ASD)


ASDresults2 <- qlf %>% topTags(n =  Inf, adjust.method = "BH") %>% as.data.frame() %>%
  mutate(Expression = case_when(logFC >= 0  & FDR < 0.05 ~ "Up-regulated" , logFC <= 0 & FDR < 0.05 ~ "Down-regulated",TRUE ~ "Unchanged"), Expression = factor(Expression, levels=c("Up-regulated","Down-regulated","Unchanged"))) %>% 
  rename("symbol" = "HGNC.symbol"  , "ENTREZID" = "EntrezGene.ID" ) %>% mutate_at('ENTREZID', as.character) %>% arrange(FDR)


ASDDGEs2 <- qlf %>% topTags(n =  Inf, p.value = 0.05, adjust.method = "BH") %>% as.data.frame() %>%
  mutate(Expression = case_when(logFC >= 0  & FDR < 0.05 ~ "Up-regulated" , logFC <= 0 & FDR < 0.05 ~ "Down-regulated",TRUE ~ "Unchanged"), Expression = factor(Expression, levels=c("Up-regulated","Down-regulated","Unchanged"))) %>% 
  rename("symbol" = "HGNC.symbol"  , "ENTREZID" = "EntrezGene.ID") %>% filter(Expression !='Unchanged') %>% mutate_at('ENTREZID', as.character)  %>% arrange(FDR)

asdvolc <- ggplot(ASDresults2,aes(x=logFC,y=-log10(FDR), colour=Expression)) + geom_point(size=0.5) + scale_colour_manual(values = c("#c0392b","#2980b9","grey"))  +
  geom_text_repel(data=head(ASDresults2,20),aes(label=symbol), max.overlaps = Inf) + theme(legend.position="bottom",legend.title = element_text(face="bold")) + 
  ggtitle("ASD - Differentially expressed genes (FDR < 0.05)") + xlim(-2,4) + ylim(0,3.5)

# TS importing  ------------------------------------------------------------
TSsamples <- read_csv("annotations/TSSamples.csv", 
                      col_types = cols(group = col_skip(), 
                                       LibraryLayout = col_skip()))
TSsamples <- as.data.frame(TSsamples)
#counts
TScounts <- read_csv("annotations/TSCounts.csv")
TScounts <- as.data.frame(TScounts)
rownames(TScounts) <- TScounts$...1
TScounts <- TScounts[,-1]
TScounts <- as.matrix(TScounts)
#annot
TSannotation <- read_csv("annotations/TSannotation.csv")
TSannotation <- as.data.frame(TSannotation)
rownames(TSannotation) <- TSannotation$...1
TSannotation <- TSannotation[,-1]

#Create a DGE list
TSDGE <- DGEList(counts = TScounts, samples = TSsamples, genes = TSannotation)
#Normalise
TSDGE <- calcNormFactors(TSDGE, method = "TMM")
#Filter
keep <- filterByExpr(TSDGE,group = TSsamples$condition)
TSDGE <- TSDGE[keep,]
#Create a counts per million object
TScpm <- cpm(TSDGE)
#Create a LOG counts per million object
TSlcpm <- cpm(TSDGE, log=TRUE)

# TS DGE 0.05  ------------------------------------------------------------
rownames(TSsamples) <- TSsamples$...1
TScond=paste0(TSsamples$condition)
TSdesign=model.matrix(~0 + TScond, data = TSsamples)
TSy<-estimateDisp(TSDGE,TSdesign)
TSfit <- glmQLFit(TSy, TSdesign)

#this is the best contrast matrix that BG recs
TS<-makeContrasts(TScondTS-TScondNC, levels=TSdesign)
#comparing everything 
TSqlf<-glmQLFTest(TSfit, contrast = TS)


TSresults2 <- TSqlf %>% topTags(n =  Inf, adjust.method = "BH") %>% as.data.frame() %>%
  mutate(Expression = case_when(logFC >= 0  & FDR < 0.05 ~ "Up-regulated" , logFC <= 0 & FDR < 0.05 ~ "Down-regulated",TRUE ~ "Unchanged"), Expression = factor(Expression, levels=c("Up-regulated","Down-regulated","Unchanged"))) %>% 
  mutate_at('ENTREZID', as.character)  %>% arrange(FDR)

TSDGEs2 <- TSqlf %>% topTags(n =  Inf, p.value = 0.05, adjust.method = "BH") %>% as.data.frame() %>%
  mutate(Expression = case_when(logFC >= 0 ~ "Up-regulated" , logFC <= 0  ~ "Down-regulated",TRUE ~ "Unchanged"), Expression = factor(Expression, levels=c("Up-regulated","Down-regulated","Unchanged"))) %>%
  filter(Expression !='Unchanged') %>% mutate_at('ENTREZID', as.character)  %>% arrange(FDR)



TSvolc <- ggplot(TSresults2,aes(x=logFC,y=-log10(FDR), colour=Expression)) + geom_point(size=0.5) + scale_colour_manual(values = c("#c0392b","#2980b9","grey"))  +
  geom_text_repel(data=head(TSresults2,20),aes(label=symbol), max.overlaps = Inf) + theme(legend.position="bottom",legend.title = element_text(face="bold")) + 
  ggtitle("TS - Differentially expressed genes (FDR < 0.05)") + xlim(-2,4) + ylim(0,3.5)


